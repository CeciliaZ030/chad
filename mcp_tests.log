   Compiling mcp-server v0.1.0 (/Users/trentoncreamer/Crypto/AI Projects/Aomi_Labs/rust-technical-assessment/mcp-server)
warning: unused import: `TokenBalanceRequest`
   --> mcp-server/tests/server_tests.rs:420:61
    |
420 |     use mcp_server::blockchain_service::{BlockchainService, TokenBalanceRequest};
    |                                                             ^^^^^^^^^^^^^^^^^^^
    |
    = note: `#[warn(unused_imports)]` on by default

error[E0599]: no function or associated item named `from_str` found for struct `Address` in the current scope
   --> mcp-server/tests/server_tests.rs:348:48
    |
348 |     let usdc_addr = alloy_primitives::Address::from_str(usdc_address).unwrap();
    |                                                ^^^^^^^^ function or associated item not found in `Address`
    |
note: if you're trying to build a new `Address` consider using one of the following associated functions:
      Address::new
      Address::with_last_byte
      Address::repeat_byte
      Address::random
      and 11 others
   --> /Users/trentoncreamer/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/alloy-primitives-1.3.1/src/bits/address.rs:45:1
    |
45  | / wrap_fixed_bytes!(
46  | |     // we implement Display with the checksum, so we don't derive it
47  | |     extra_derives: [],
48  | |     /// An Ethereum address, 20 bytes in length.
...   |
86  | |     pub struct Address<20>;
87  | | );
    | |_^
    = help: items from traits can only be used if the trait is in scope
    = note: this error originates in the macro `wrap_fixed_bytes` (in Nightly builds, run with -Z macro-backtrace for more info)
help: trait `FromStr` which provides `from_str` is implemented but not in scope; perhaps you want to import it
    |
7   + use std::str::FromStr;
    |
help: there is an associated function `from` with a similar name
    |
348 -     let usdc_addr = alloy_primitives::Address::from_str(usdc_address).unwrap();
348 +     let usdc_addr = alloy_primitives::Address::from(usdc_address).unwrap();
    |

error[E0599]: no function or associated item named `from_str` found for struct `Address` in the current scope
   --> mcp-server/tests/server_tests.rs:349:49
    |
349 |     let alice_addr = alloy_primitives::Address::from_str(alice_address).unwrap();
    |                                                 ^^^^^^^^ function or associated item not found in `Address`
    |
note: if you're trying to build a new `Address` consider using one of the following associated functions:
      Address::new
      Address::with_last_byte
      Address::repeat_byte
      Address::random
      and 11 others
   --> /Users/trentoncreamer/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/alloy-primitives-1.3.1/src/bits/address.rs:45:1
    |
45  | / wrap_fixed_bytes!(
46  | |     // we implement Display with the checksum, so we don't derive it
47  | |     extra_derives: [],
48  | |     /// An Ethereum address, 20 bytes in length.
...   |
86  | |     pub struct Address<20>;
87  | | );
    | |_^
    = help: items from traits can only be used if the trait is in scope
    = note: this error originates in the macro `wrap_fixed_bytes` (in Nightly builds, run with -Z macro-backtrace for more info)
help: trait `FromStr` which provides `from_str` is implemented but not in scope; perhaps you want to import it
    |
7   + use std::str::FromStr;
    |
help: there is an associated function `from` with a similar name
    |
349 -     let alice_addr = alloy_primitives::Address::from_str(alice_address).unwrap();
349 +     let alice_addr = alloy_primitives::Address::from(alice_address).unwrap();
    |

error[E0599]: no method named `tool_router` found for struct `BlockchainService` in the current scope
   --> mcp-server/tests/server_tests.rs:367:34
    |
367 |             let result = service.tool_router().call_tool(tool_name, args).await;
    |                          --------^^^^^^^^^^^--
    |                          |       |
    |                          |       this is an associated function, not a method
    |                          |       private field, not a method
    |                          help: use associated function syntax instead: `BlockchainService::tool_router()`
    |
    = note: found the following associated functions; to be used as methods, functions must have a `self` parameter
    = note: the candidate is defined in an impl for the type `BlockchainService`

error[E0223]: ambiguous associated type
   --> mcp-server/tests/server_tests.rs:377:29
    |
377 | ...                   rmcp::model::Content::Text { text } => {
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
help: if there were a trait named `Example` with associated type `Text` implemented for `Annotated<RawContent>`, you could use the fully-qualified path
    |
377 -                             rmcp::model::Content::Text { text } => {
377 +                             <Annotated<RawContent> as Example>::Text { text } => {
    |

error[E0599]: no method named `tool_router` found for struct `BlockchainService` in the current scope
   --> mcp-server/tests/server_tests.rs:450:38
    |
450 |                 let result = service.tool_router().call_tool(tool_name, args).await;
    |                              --------^^^^^^^^^^^--
    |                              |       |
    |                              |       this is an associated function, not a method
    |                              |       private field, not a method
    |                              help: use associated function syntax instead: `BlockchainService::tool_router()`
    |
    = note: found the following associated functions; to be used as methods, functions must have a `self` parameter
    = note: the candidate is defined in an impl for the type `BlockchainService`

error[E0223]: ambiguous associated type
   --> mcp-server/tests/server_tests.rs:457:33
    |
457 | ...                   rmcp::model::Content::Text { text } => {
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
help: if there were a trait named `Example` with associated type `Text` implemented for `Annotated<RawContent>`, you could use the fully-qualified path
    |
457 -                                 rmcp::model::Content::Text { text } => {
457 +                                 <Annotated<RawContent> as Example>::Text { text } => {
    |

Some errors have detailed explanations: E0223, E0599.
For more information about an error, try `rustc --explain E0223`.
warning: `mcp-server` (test "server_tests") generated 1 warning
error: could not compile `mcp-server` (test "server_tests") due to 6 previous errors; 1 warning emitted
warning: build failed, waiting for other jobs to finish...
